generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  password   String?
  avatar     String?
  background String?
  bio        String?

  createdAt DateTime @default(now())

  provider OAuth?
  role     Role   @default(USER)

  follower  User[] @relation("Follow")
  following User[] @relation("Follow")

  post         Post[]    @relation("PostCreated")
  comment      Comment[] @relation("CommentCreated")
  likedPost    Post[]    @relation("PostLiked")
  likedComment Comment[] @relation("CommentLiked")
  chat         Chat[]
  message      Message[]

  notif_donotuse Notification[] // Filter notif based on receierId instead
}

model OAuth {
  id       String @id
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  provider String
}

model Post {
  id    Int      @id @default(autoincrement())
  text  String
  media String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likedBy   User[]    @relation("PostLiked")
  comment   Comment[] @relation("PostComment")

  user   User @relation("PostCreated", fields: [userId], references: [id])
  userId Int

  notif_donotuse Notification[]
}

model Comment {
  id    Int      @id @default(autoincrement())
  text  String
  media String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedBy   User[]   @relation("CommentLiked")

  user   User @relation("CommentCreated", fields: [userId], references: [id])
  userId Int
  post   Post @relation("PostComment", fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  notif_donotuse Notification[]
}

model Notification {
  id     Int       @id @default(autoincrement())
  isRead Boolean   @default(false)
  type   NotifType
  date   DateTime  @default(now())

  receiverId Int

  /**
   * Subject
   */
  actorId Int
  actor   User @relation(fields: [actorId], references: [id])

  /**
   * Resources
   */
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

enum NotifType {
  follower
  post_from_followed
  post_liked
  post_commented
  comment_liked
}

enum Role {
  ADMIN
  USER
  GUEST
}

model Chat {
  id      Int       @id @default(autoincrement())
  member  User[]
  message Message[]
}

model Message {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  status    MsgStatus @default(UNREAD)
  readAt    DateTime?

  text  String?
  media String[]

  userId Int
  user   User @relation(fields: [userId], references: [id])

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
}

enum MsgStatus {
  UNREAD
  READ
}
